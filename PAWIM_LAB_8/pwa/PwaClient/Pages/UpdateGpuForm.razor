@page "/gpus/update/{name}"
@inject HttpClient HttpClient

<h1>Update Gpu</h1>

@if (isFormSubmitted)
{
    <p>Success</p>
    <a class="btn btn-success" href="/gpus">Go back</a>
}
else
{
    <form @onsubmit="SubmitForm">
    <div class="mb-3">
        <label class="form-label" for="name">Name</label>
        <input class="form-control" id="name" @bind="gpuForm.Name" type="text">
    </div>
    <div class="mb-3">
        <label class="form-label" for="vramCapacity">VRAM Capacity [GB]</label>
        <input class="form-control" id="vramCapacity" @bind="gpuForm.VideoRamCapacity" type="text">
    </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-secondary" href="/gpus">Cancel</a>
            <button class="btn btn-primary ms-3" type="submit">Submit</button>
        </div>
    </form>
}

@code {
    [Parameter]
    public string? name {get; set;}

    private GpuForm gpuForm = new GpuForm();
    private bool isFormSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        var gpu = await HttpClient.GetFromJsonAsync<Gpu>(Constants.GpusUrl + "/" + name);
        gpuForm.Name = gpu.Name;
        gpuForm.VideoRamCapacity = gpu.VideoRamCapacity;
    }

    private async Task SubmitForm()
    {
        var gpu = new Gpu(
            gpuForm.Name,
            gpuForm.VideoRamCapacity
            );
        await HttpClient.PutAsJsonAsync(Constants.GpusUrl + "/" + name, gpu);
        isFormSubmitted = true;
    }
}